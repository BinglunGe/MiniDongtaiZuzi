.	显示
DEPTH	将当前堆栈层数压入栈顶
NEGATE 	取栈顶数的倒数压入栈顶
ABS	取栈顶项的绝对值
+	加
-	减
*	乘
/	整型除以
MOD	取余
/MOD	压入（余数；整数商）
[12]---	+/-/*/\/=1/2
MAX	二者中取最大
MIN	二者中取最小
D[^]	双字节整型
U[^]	无符号单字节整型
DU[^]	无符号双字节整型
UM*,/MO	两个无符号单字节整型运算，得无符号双字节数
*D	两个有符号单字节整型相乘，得有符号双字节数
DUP	复制栈顶项
.S	从左至右显示整个堆栈
DROP	丢弃栈顶项
SWAP	两栈顶项对调
OVER	复制自栈顶左数第二项到栈顶
PICK	复制自栈顶左数第栈顶项项到栈顶
ROT	移动自栈顶左数第三项到栈顶，第一、二项顺移
NROT	移动自栈顶左数第二项到栈顶，第一、三项顺移
ROLL	移动自栈顶左数第栈顶项项到栈顶
2---	上者成对操作
CONST,N	定义常量
VAR,N	定义变量
!	将次栈顶项压入栈顶项所指向的地址
@	取出栈顶项所指向地址的项放于栈顶
?	输出栈顶项所指向地址的项
CREATE	定义词，并分配内存起始地址
ALLOT	为当前所定义词保留栈顶项所表示个字节
C[!@?]	以字节读写
TRUE	-1
FALSE	0
<>	!=
IF	判断
ELSE	否则
THEN	结束
DO	计次循环首
?DO	当循环限制同循环下标不等时进入循环
LOOP	计次循环尾
+LOOP	将循环下标索引累加参数栈栈顶值
?DUP	当栈顶项不为零时将其复制
>R	将参数栈栈顶项移至返回栈顶
R>	将返回栈栈顶项移至参数栈顶
R@	将返回栈栈顶项复制至参数栈栈顶
I	将当前循环之循环下标索引复制于参数栈栈顶
KEY	读入字符并将其字符值置于栈顶
EMIT	将栈顶项所指值所表示之字符输出
BEGIN	不定循环首
UNITL	不定循环尾，当当前栈顶项值为真时结束
BEGIN	不定循环二类首
WHILE	当栈顶项为真，继续循环
REPEAT	不定循环二类尾
LEAVE	立即跳出当前所处非不定循环一二类之有限循环